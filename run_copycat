#!/bin/bash
progname=run_copycat
#set -xv

echo in run_copycat
function usage () {
    cat <<EOF
Usage: $progname [-d] [-j threads]  -c code 
$progname -h for help
EOF
    exit 0
}

function guide () {
    cat <<EOF
Usage: $progname [-d] [-j threads]  -c code  -f Dfilename
[-h] help displays this help menu
[-d] debug mode, runs algorithm only 100 times at each condition to debug code
[-j threads] number of threads for running in parallel
-c code *required field: a code value (can mix letters and numbers) so users can revisit their data later,
        this becomes the run directory inside user_data/
        must match the code used for prepare_copycat

EOF
    exit 0
}
#-f Dfilename *required field: a name for the file a user uploaded from the web app
#        must match the filename used for prepare_copycat

threads=1
testing=false
code=0
Dfilename=D.txt
outdir=user_data/0

found_c=false
found_f=false

while getopts ":j:c:f:dh" option
do
  case $option in
    j )
        threads=$OPTARG
        if [ $threads -gt 0 ]; then
          echo "-j: $threads threads" >&2
        else
          echo "please enter a positive integer indicating the number of threads you wish to use after the -j option, otherwise leave out -j to run on a single node or cpu"
          usage
        fi
        ;;
    d )
        testing=true
        echo "-d: debug mode initiated" >&2;;
    c )
        code=$OPTARG
        outdir=$(pwd)/user_data/$code
        
        if [ ! -d $outdir ]; then
            echo ERROR: ----------Directory does not exist: $outdir------------
            echo first run this command to create info.txt file: ./prepare_copycat $code $Dfilename
            echo or if you have already run it, make sure you are inserting the right code here
            usage
        fi
        echo "-c: code=$code" >&2
        echo output directory: $outdir;;
    #f )
    #    Dfilename=$OPTARG
    #    echo "-f: filename of input data: $Dfilename" >&2;;
    h ) guide;;
    : ) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
    \? ) usage ;;
    * ) echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
  esac
done


shift $(($OPTIND - 1))

if [ ! -f $outdir/$Dfilename ];then
    echo file not found: $outdir/$Dfilename
    usage
fi



numsamples=0
numbins=0

file="$outdir/info.txt"
if [ -f $file ]; then
    echo $file exists--check
    
    while IFS=$'\t' read -r key value
    do
        echo $key
        echo $value
        if [ "$key" = "samples" ]
        then
            numsamples=$value
            #echo set numsamples
        elif [ "$key" = "bins" ]
        then
            numbins=$value
            #echo set numbins
            # this stops working if info.txt doesn't have a newline at the end, check to make sure check_file() in deconvolve.py adds a newline if this ever breaks
        fi
    done <"$file"
else
    echo ERROR: ----------File does not exist: $outdir/info.txt------------
    echo first run this command to create info.txt file: ./prepare_copycat $code $Dfilename
    usage
fi

echo samples: $numsamples
echo bins: $numbins

max_num_clones=5
if [ $max_num_clones -gt $numsamples ]; then
    max_num_clones=$numsamples
fi
echo Running algorithm on 2 up to $max_num_clones clones


Dfilename_and_path=$outdir/$Dfilename #for plotting

if [ $threads -gt 1 ]; then
    echo "running algorithm in parallel"
    if $testing ; then
        echo /data/schatz/software/bin/parallel -j $threads --dryrun ./deconvolve_for_x_clones -d -c $code -f $Dfilename -n {1} ::: $(seq 2 $max_num_clones)
    else
        echo /data/schatz/software/bin/parallel -j $threads ./deconvolve_for_x_clones -c $code -f $Dfilename -n {1} ::: $(seq 2 $max_num_clones)
    fi
else
    echo "running algorithms one after the other"
    for i in `seq 2 $max_num_clones`;
    do
        if $testing ; then
            ./deconvolve_for_x_clones -d -c $code -f $Dfilename -n $i
        else
            ./deconvolve_for_x_clones -c $code -f $Dfilename -n $i
        fi
####################
	# do individual plotting here
	python -c "import os; os.environ[ 'MPLCONFIGDIR' ] = '/mnt/data/copycat/mplconfig/'; import make_plots; make_plots.make_plots('$outdir','$Dfilename_and_path',numclones='$i')" &> $outdir/plotting_$i.log
	#python -c "import os; os.environ[ 'MPLCONFIGDIR' ] = '/mnt/data/copycat/mplconfig/'; import make_plots; make_plots.make_plots('$outdir','$Dfilename_and_path',numclones='$i')" &> $outdir/plotting.log
#####################
    done
fi

echo finished all calls to deconvolve_for_x_clones from run_copycat

if [ ! -d $outdir/2_clones ]; then
    echo "no costs.txt file was created at $outdir/costs.txt"
    echo "algorithm must not have run"
    exit 0
fi

echo "collecting costs from all analyses"

python -c "import deconvolve; deconvolve.collect_costs('$outdir')"

echo "plotting everything"

#Dfilename_and_path=$outdir/$Dfilename
#python -c "import os; os.environ[ 'MPLCONFIGDIR' ] = '/mnt/data/copycat/mplconfig/'; import make_plots; make_plots.make_plots('$outdir','$Dfilename_and_path')" &> $outdir/plotting.log



zip -r user_data/$code/copycat_data_$code user_data/$code
